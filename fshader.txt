#version 430

in vec4 Position;
in vec3 Normal;
in vec2 TexCoord;

layout (binding=0) uniform sampler2D HdrTex;
layout (binding=1) uniform sampler2D BlurTex1;
layout (binding=2) uniform sampler2D BlurTex2;

// Select functionality
subroutine vec4    RenderPassType();
subroutine uniform RenderPassType RenderPass;

struct LightInfo {
    vec4 Position;  // Light position in eye coords
    vec3 Intensity; // Light intensity
};
uniform LightInfo Lights[3];

struct MaterialInfo {
    vec3  Ka;        // Ambient  reflectivity
    vec3  Kd;        // Diffuse  reflectivity
    vec3  Ks;        // Specular reflectivity
    float Shininess; // Specular shininess factor
};
uniform MaterialInfo Material;

uniform mat3 rgb2xyz = mat3(
  0.4124564, 0.2126729, 0.0193339,
  0.3575761, 0.7151522, 0.1191920,
  0.1804375, 0.0721750, 0.9503041 );

uniform mat3 xyz2rgb = mat3(
  3.2404542, -0.9692660, 0.0556434,
  -1.5371385, 1.8760108, -0.2040259,
  -0.4985314, 0.0415560, 1.0572252 );

uniform float Weight[10];
uniform int   PixOffsets[10] = int[](0,1,2,3,4,5,6,7,8,9);

uniform float Exposure  = 0.35;
uniform float White     = 0.928;
uniform bool  DoToneMap = true;
uniform float LumThresh; // Luminance threshold
uniform float AveLum;

float luminance( vec3 color ) {
    return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
}

layout (location = 0) out vec4 FragColor;

/*
vec3 phongModel ( vec4 position, vec3 normal ) {

    vec3 v         = normalize(-position.xyz); // In eyeCoords, the viewer is at the origin -> only take negation of eyeCoords vector

    vec3 total = vec3(0.0f, 0.0f, 0.0f);

    for( int i = 0; i < 3; i++ )
    {
        vec3 s         = normalize(vec3(Lights[i].Position - position));
        vec3 h         = normalize (v+s);

        vec3  ambient  = Lights[i].Intensity * Material.Ka;

        float sDotN    = max(dot(s, normal), 0.0);
        vec3  diffuse  = Lights[i].Intensity * Material.Kd * sDotN;
        vec3  spec     = vec3(0.0);
        if (sDotN > 0.0) {
            spec = Lights[i].Intensity * Material.Ks * pow(max(dot(h,normal), 0.0), Material.Shininess);
        }
        total += ambient + diffuse + spec;
    }
    return total;
}
*/

vec3 ads( vec3 pos, vec3 norm )
{
    vec3 v = normalize(vec3(-pos));
    vec3 total = vec3(0.0f, 0.0f, 0.0f);

    for( int i = 0; i < 3; i++ ) {
      vec3 s = normalize( vec3(Lights[i].Position) - pos) ;
      vec3 r = reflect( -s, norm );

      total +=
        Lights[i].Intensity * ( Material.Ka +
            Material.Kd * max( dot(s, norm), 0.0 ) +
            Material.Ks * pow( max( dot(r,v), 0.0 ), Material.Shininess ) );
    }
    return total;
}

subroutine (RenderPassType)
vec4 pass1() {
    return vec4(ads(vec3(Position), Normal),1.0);    
}

// Bright-pass filter (write to BlurTex1)
subroutine( RenderPassType )
vec4 pass2()
{
    vec4 val = texture(HdrTex, TexCoord);    
    if( luminance(val.rgb) > LumThresh )
    {
        return val;
    }
    else
    {
        return vec4(0.0);
    }
}

// First blur pass (read from BlurTex1, write to BlurTex2)
subroutine( RenderPassType )
vec4 pass3()
{
    float dy = 1.0 / (textureSize(BlurTex1,0)).y;

    vec4 sum = texture(BlurTex1, TexCoord) * Weight[0];
    for( int i = 1; i < 10; i++ )
    {
         sum += texture( BlurTex1, TexCoord + vec2(0.0,PixOffsets[i]) * dy ) * Weight[i];
         sum += texture( BlurTex1, TexCoord - vec2(0.0,PixOffsets[i]) * dy ) * Weight[i];
    }
    return sum;    
}

// Second blur (read from BlurTex2, write to BlurTex1)
subroutine( RenderPassType )
vec4 pass4()
{
    float dx = 1.0 / (textureSize(BlurTex2,0)).x;

    vec4 sum = texture(BlurTex2, TexCoord) * Weight[0];
    for( int i = 1; i < 10; i++ )
    {
       sum += texture( BlurTex2, TexCoord + vec2(PixOffsets[i],0.0) * dx ) * Weight[i];
       sum += texture( BlurTex2, TexCoord - vec2(PixOffsets[i],0.0) * dx ) * Weight[i];
    }
    return sum;
}

subroutine (RenderPassType)
vec4 pass5() {

    // Retrieve high-res color from texture
    vec4 color = texture( HdrTex, TexCoord );

    // Convert to XYZ
    vec3 xyzCol = rgb2xyz * vec3(color);

    // Convert to xyY
    float xyzSum = xyzCol.x + xyzCol.y + xyzCol.z;
    vec3 xyYCol = vec3( xyzCol.x / xyzSum, xyzCol.y / xyzSum, xyzCol.y);

    // Apply the tone mapping operation to the luminance (xyYCol.z or xyzCol.y)
    float L = (Exposure * xyYCol.z) / AveLum;
    L = (L * ( 1 + L / (White * White) )) / ( 1 + L );

    // Using the new luminance, convert back to XYZ
    xyzCol.x = (L * xyYCol.x) / (xyYCol.y);
    xyzCol.y = L;
    xyzCol.z = (L * (1 - xyYCol.x - xyYCol.y))/xyYCol.y;

    // Convert back to RGB and send to output buffer
    vec4 toneMapColor = vec4( xyz2rgb * xyzCol, 1.0);

    if (DoToneMap)
    {
        ///////////// Combine with blurred texture /////////////
        // We want linear filtering on this texture access so that
        // we get additional blurring.
        vec4 blurTex = texture(BlurTex1, TexCoord);

        return toneMapColor + blurTex;
    }
    else
    {
        //return texture( BlurTex1, TexCoord );
        //return texture( HdrTex, TexCoord );
        return toneMapColor;
    }
}

void main()
{    
    FragColor = RenderPass();    
}
